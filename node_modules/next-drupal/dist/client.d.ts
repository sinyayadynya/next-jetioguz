import type { GetStaticPathsContext, GetStaticPathsResult, GetStaticPropsContext, NextApiRequest, NextApiResponse } from "next";
import type { JsonApiResource, Locale, AccessToken, JsonApiResponse, JsonApiWithLocaleOptions, JsonApiParams, DrupalTranslatedPath, DrupalMenuLinkContent, FetchOptions, DrupalClientOptions, BaseUrl, JsonApiWithAuthOptions, PathPrefix, PathAlias, PreviewOptions, JsonApiWithCacheOptions, JsonApiCreateResourceBody, JsonApiUpdateResourceBody, DrupalClientAuthClientIdSecret, JsonApiCreateFileResourceBody, DrupalView, DrupalFile } from "./types";
export declare class DrupalClient {
    baseUrl: BaseUrl;
    debug: DrupalClientOptions["debug"];
    frontPage: DrupalClientOptions["frontPage"];
    private serializer;
    private cache;
    private throwJsonApiErrors?;
    private logger;
    private fetcher?;
    private _headers?;
    private _auth?;
    private _apiPrefix;
    private useDefaultResourceTypeEntry?;
    private _token?;
    private accessToken?;
    private accessTokenScope?;
    private tokenExpiresOn?;
    private withAuth?;
    private previewSecret?;
    private forceIframeSameSiteCookie?;
    /**
     * Instantiates a new DrupalClient.
     *
     * const client = new DrupalClient(baseUrl)
     *
     * @param {baseUrl} baseUrl The baseUrl of your Drupal site. Do not add the /jsonapi suffix.
     * @param {options} options Options for the client. See Experiment_DrupalClientOptions.
     */
    constructor(baseUrl: BaseUrl, options?: DrupalClientOptions);
    set apiPrefix(apiPrefix: DrupalClientOptions["apiPrefix"]);
    get apiPrefix(): DrupalClientOptions["apiPrefix"];
    set auth(auth: DrupalClientOptions["auth"]);
    set headers(value: DrupalClientOptions["headers"]);
    private set token(value);
    fetch(input: RequestInfo, init?: FetchOptions): Promise<Response>;
    createResource<T extends JsonApiResource>(type: string, body: JsonApiCreateResourceBody, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    createFileResource<T = DrupalFile>(type: string, body: JsonApiCreateFileResourceBody, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    updateResource<T extends JsonApiResource>(type: string, uuid: string, body: JsonApiUpdateResourceBody, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    deleteResource(type: string, uuid: string, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<boolean>;
    getResource<T extends JsonApiResource>(type: string, uuid: string, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions & JsonApiWithCacheOptions): Promise<T>;
    getResourceFromContext<T extends JsonApiResource>(input: string | DrupalTranslatedPath, context: GetStaticPropsContext, options?: {
        pathPrefix?: PathPrefix;
        isVersionable?: boolean;
    } & JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    getResourceByPath<T extends JsonApiResource>(path: string, options?: {
        isVersionable?: boolean;
    } & JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    getResourceCollection<T = JsonApiResource[]>(type: string, options?: {
        deserialize?: boolean;
    } & JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    getResourceCollectionFromContext<T = JsonApiResource[]>(type: string, context: GetStaticPropsContext, options?: {
        deserialize?: boolean;
    } & JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    getPathsFromContext: (types: string | string[], context: GetStaticPathsContext, options?: {
        params?: JsonApiParams;
        pathPrefix?: PathPrefix;
    } & JsonApiWithAuthOptions) => Promise<GetStaticPathsResult<{
        slug: string[];
    }>["paths"]>;
    getStaticPathsFromContext(types: string | string[], context: GetStaticPathsContext, options?: {
        params?: JsonApiParams;
        pathPrefix?: PathPrefix;
    } & JsonApiWithAuthOptions): Promise<GetStaticPathsResult<{
        slug: string[];
    }>["paths"]>;
    buildStaticPathsFromResources(resources: {
        path: PathAlias;
    }[], options?: {
        pathPrefix?: PathPrefix;
        locale?: Locale;
    }): {
        params: {
            slug: string[];
        };
    }[];
    buildStaticPathsParamsFromPaths(paths: string[], options?: {
        pathPrefix?: PathPrefix;
        locale?: Locale;
    }): {
        params: {
            slug: string[];
        };
    }[];
    translatePath(path: string, options?: JsonApiWithAuthOptions): Promise<DrupalTranslatedPath>;
    translatePathFromContext(context: GetStaticPropsContext, options?: {
        pathPrefix?: PathPrefix;
    } & JsonApiWithAuthOptions): Promise<DrupalTranslatedPath>;
    getPathFromContext(context: GetStaticPropsContext, options?: {
        pathPrefix?: PathPrefix;
    }): string;
    getIndex(locale?: Locale): Promise<JsonApiResponse>;
    getEntryForResourceType(type: string, locale?: Locale): Promise<string>;
    preview(request?: NextApiRequest, response?: NextApiResponse, options?: PreviewOptions): Promise<void | NextApiResponse<any>>;
    getMenu<T = DrupalMenuLinkContent>(name: string, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions & JsonApiWithCacheOptions): Promise<{
        items: T[];
        tree: T[];
    }>;
    buildMenuTree(links: DrupalMenuLinkContent[], parent?: DrupalMenuLinkContent["id"]): any;
    getView<T = JsonApiResource>(name: string, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<DrupalView<T>>;
    getSearchIndex<T = JsonApiResource[]>(name: string, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    getSearchIndexFromContext<T = JsonApiResource[]>(name: string, context: GetStaticPropsContext, options?: JsonApiWithLocaleOptions & JsonApiWithAuthOptions): Promise<T>;
    buildUrl(path: string, params?: string | Record<string, string> | URLSearchParams | JsonApiParams): URL;
    getAccessToken(opts?: DrupalClientAuthClientIdSecret): Promise<AccessToken>;
    deserialize(body: any, options?: any): unknown;
    private getErrorsFromResponse;
    private formatJsonApiErrors;
    private _debug;
    private throwError;
    private handleJsonApiErrors;
    private getAuthFromContextAndOptions;
}
